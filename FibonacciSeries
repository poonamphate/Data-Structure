//Recursive approach - Time Complexity: T(n) = T(n-1) + T(n-2) which is exponential.This implementation does a lot of repeated work. 
So this is a bad implementation for nth Fibonacci number. Extra Space: O(n) if we consider the function call stack size, otherwise O(1).
//Iterative approach - We can optimize the space used in method 2 by storing the previous two numbers only because that is all we need to get the next Fibonacci number in series.
Time Complexity:O(n)
Extra Space: O(1)

public class FibonacciSeries {
   public static void main(String []args) {
      printFiboIterative(10);
      
      System.out.println("\n*****");
      
      for(int i = 0; i<10; i++){
          System.out.print(printFiboRecursion(i)+" ");
      }
   }
   
   static void printFiboIterative(int k){
       if(k <= 0){
           return;
       }
       int num1 = 0, num2 = 1;
       int sum = 0, i = 3;
       System.out.print(0+" "+1+" ");
       while(i <= k){
           sum = num1 + num2;
           System.out.print(sum+" ");
           num1 = num2;
           num2 = sum;
           i++;
       }
   }
   
   static int printFiboRecursion(int k){
       if(k <= 1){
           return k;
       }
       int result = printFiboRecursion(k-1)+printFiboRecursion(k-2);
       return result;
   }
}
